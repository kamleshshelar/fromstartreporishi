on: 
  [workflow_dispatch]
env:
  REGISTRY_NAME: myregistryrishi
  CLUSTER_NAME: cluster-rg-dev-cluster
  CLUSTER_RESOURCE_GROUP: cluster-rg-dev
  NAMESPACE: myns
  APP_NAME: hubapp
  APP_NAME1: nodeapp
  SECRET: acrsecret
  
jobs:
  acrcreation:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: acr
    steps:
    - uses: actions/checkout@main
    - name: Log in with Azure
      uses: azure/login@v1
      with:
          creds: '${{ secrets.AZURE_CREDENTIALS }}'
    - name: Terraform Install
      env:
            TERRAFORM_VERSION: "1.0.1"
      run: |
        tf_version=$TERRAFORM_VERSION
        wget https://releases.hashicorp.com/terraform/"$tf_version"/terraform_"$tf_version"_linux_amd64.zip
        unzip terraform_"$tf_version"_linux_amd64.zip
        sudo mv terraform /usr/local/bin/
        
    - name: Terraform version
      run: terraform --version
        
    - name: Terraform Init
      run: terraform init
#      run: |
#        az login
#        terraform init -input=false
#        terraform plan
#        terraform apply -auto-approve -input=false
          
#   build:
#     runs-on: ubuntu-latest
#     defaults:
#       run: 
#         working-directory: akscluster
#     steps:
#     - uses: actions/checkout@main
    
#     # Connect to Azure Container Registry (ACR)
#     - uses: azure/docker-login@v1
#       with:
#         login-server: ${{ env.REGISTRY_NAME }}.azurecr.io
#         username: ${{ secrets.REGISTRY_USERNAME }} 
#         password: ${{ secrets.REGISTRY_PASSWORD }}
    
#     # Container build and push to a Azure Container Registry (ACR)
#     - run: |
#         docker build -f Dockerfilehub . -t ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ github.sha }}
#         docker push ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ github.sha }}
#         docker build -f Dockerfilenode . -t ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME1 }}:${{ github.sha }}
#         docker push ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME1 }}:${{ github.sha }}

# #######################connecting to AKS CLuster and CReating Image Pull secret#######################
#     - uses: azure/aks-set-context@v1
#       with:
#         creds: '${{ secrets.AZURE_CREDENTIALS }}'
#         cluster-name: ${{ env.CLUSTER_NAME }}
#         resource-group: ${{ env.CLUSTER_RESOURCE_GROUP }}
    
#     # Create namespace if doesn't exist
#     - run: |
#         kubectl create namespace ${{ env.NAMESPACE }} --dry-run -o json | kubectl apply -f -
    
#     # Create image pull secret for ACR
#     - uses: azure/k8s-create-secret@v1
#       with:
#         container-registry-url: ${{ env.REGISTRY_NAME }}.azurecr.io
#         container-registry-username: ${{ secrets.REGISTRY_USERNAME }}
#         container-registry-password: ${{ secrets.REGISTRY_PASSWORD }}
#         secret-name: ${{ env.SECRET }}
#         namespace: ${{ env.NAMESPACE }}
#         force: true

# ##Selenium Hub Application Deployment####

#     - uses: azure/k8s-deploy@v1
#       with:
#         manifests:
#           manifests/sele-hub.yml
#         images:
#           ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ github.sha }}
#         imagepullsecrets:
#           ${{ env.SECRET }}
#         namespace: ${{ env.NAMESPACE }}

# ##Selenium Node Application Deployment####

#     - uses: azure/k8s-deploy@v1
#       with:
#         manifests:
#           manifests/sele-node.yml
#         images:
#           ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME1 }}:${{ github.sha }}
#         imagepullsecrets:
#           ${{ env.SECRET }}
#         namespace: ${{ env.NAMESPACE }}

#     - uses: azure/setup-helm@v1
#       with:
#         version: '3.7.0' # default is latest stable
#       id: install
   
#     - name: ingress Installation
#       run: |
#           helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
#           helm search repo
#           helm repo update
#           az login
#           az aks get-credentials --resource-group cluster-rg-dev --name cluster-rg-dev-cluster --overwrite-existing
#           echo "::set-output name=Noderg::$(az aks show --resource-group cluster-rg-dev --name cluster-rg-dev-cluster --query nodeResourceGroup -o tsv)"
#           echo "::set-output name=PublicIP::$(az network public-ip create --resource-group Noderg --name PublicIpForIngress --sku Standard --allocation-method static --query publicIp.ipAddress -o tsv)"
                 
   
   
